import org.grails.gradle.plugin.commands.*

buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        flatDir {
            dirs 'lib'
        }
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "${System.getProperty('user.home')}/.m2/repository" }
        maven { url "https://dl.bintray.com/orubel/plugins" }
        jcenter {
            url "https://jcenter.bintray.com/"
        }
        flatDir {
            dirs 'lib'
        }
    }
    dependencies {
        classpath group: 'org.codehaus.gpars', name: 'gpars', version: '1.2.1'
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        //classpath "org.grails.plugins:hibernate5:${gormVersion}"

        // for installing local
        classpath "org.grails.plugins:api-framework:${apiFrameworkVersion}"
    }
}

plugins {
    id "io.spring.dependency-management" version "0.6.0.RELEASE"
    
    // This plugin optimizes/exports to docker; built for springboot2
    //id 'com.google.cloud.tools.jib' version '2.1.0'
    //id "com.jfrog.bintray" version "1.7.3"
}



def appVersion = project.buildVersion
def patchVersion = project.patchVersion
version = "${appVersion}.${patchVersion}"

group "@grails.app.group@"

apply plugin: "org.springframework.boot"
apply plugin: "org.grails.grails-web"
//apply plugin: "org.grails.grails-gsp"


sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "${System.getProperty('user.home')}/.m2/repository/" }
    maven { url "https://repo.spring.io/milestone"}
    maven{ url "https://repo.spring.io/snapshot"}
    maven { url "https://dl.bintray.com/orubel/plugins" }
    //maven { url "http://maven.it.su.se/it.su.se/maven2/" }
    jcenter { url "https://jcenter.bintray.com/" }
}

//dependencyManagement {
//    imports {
//        mavenBom "org.grails:grails-bom:$grailsVersion"
//    }
//    applyMavenExclusions false
//}


task generateIostateCommand(type: ApplicationContextCommandTask) {
    classpath =  project.sourceSets.main.runtimeClasspath + project.configurations.console
    command = "generate-iostate"
}

task generateControllerCommand(type: ApplicationContextCommandTask) {
    classpath =  project.sourceSets.main.runtimeClasspath + project.configurations.console
    command = "generate-controller"
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}


dependencies {
    // R2DBC - WOULD HAVE TO WRAP ALL CACHING AND REWRITE EVERYTHING; BETTER TO FORK TO SPRINGBOOT2
    //compile 'io.r2dbc:r2dbc-spi:1.0.0.BUILD-SNAPSHOT'
    //compile 'io.r2dbc:r2dbc-h2:1.0.0.BUILD-SNAPSHOT'


    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'


    /**
     * API Block
     */
    compile "org.grails.plugins:api-framework:${apiFrameworkVersion}"
    //compile group: 'org.scribe', name: 'scribe', version: '1.4.7'

    /**
     * MVC Support Block
     */
    provided 'org.grails.plugins:cache:4.0.0'
    compile "org.grails.plugins:async"
    provided "org.grails:grails-logging"
    provided "org.grails:grails-plugin-i18n"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-interceptors"
    provided 'org.grails.plugins:converters:4.0.0'
    provided "org.grails.plugins:events"
    provided('org.grails:grails-web')

    /**
     * Application Server
     */
    runtime "org.apache.tomcat:tomcat-jdbc"

    /**
     * Parallelization Block
     */
    provided('org.codehaus.gpars:gpars:1.2.1'){
        exclude group:'org.multiverse', module:'multiverse-core'
        exclude group:'org.codehaus.groovy', module: 'groovy-all'
    }
    provided("org.codehaus.groovy:groovy-ant:${groovyVersion}")

    /**
     * SpringBoot Block
     */
    compile "org.springframework.boot:spring-boot-starter-logging"
    provided 'org.springframework.boot:spring-boot-starter-tomcat'
    compile "org.springframework.boot:spring-boot-autoconfigure"


    /**
     * DB Block
     */
    provided "org.grails.plugins:hibernate5"
    provided "org.hibernate:hibernate-core:5.1.5.Final"
    provided "org.hibernate:hibernate-ehcache:5.1.5.Final"
    provided("com.h2database:h2")

    /**
     * DB Connector
     */
    runtime 'mysql:mysql-connector-java:5.1.29'

    /**
     * Security block
     */
    provided('org.grails.plugins:spring-security-core:3.2.0.M1'){
        exclude(module: 'org.grails.plugins:cors')
    }
    compile('org.grails.plugins:spring-security-rest:2.0.0.M2'){
        exclude(module: 'org.grails.plugins:cors')
    }
    // required by spring-security-rest for loginController/logoutController
    compile "org.grails:grails-plugin-rest"
    compile('org.grails.plugins:spring-security-rest-gorm:2.0.0.M2'){
        exclude module: 'org.grails.plugins:spring-security-rest:2.0.0.M2'
    }

    // GOOGLE PROVIDER BLOCK
    provided 'com.google.http-client:google-http-client-jackson2:1.23.0'
    provided 'com.google.api-client:google-api-client:1.30.4'
    provided 'com.google.guava:guava:23.6-jre'
    provided 'org.apache.httpcomponents:httpcore:4.4.8'



    /**
     * Test Block
     */
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails:grails-gorm-testing-support:1.1.4"
    testCompile "org.grails:grails-web-testing-support:1.1.4"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    testCompile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.1') {
        exclude module: "commons-logging"
        exclude module: "xml-apis"
        exclude module: "groovy"
    }
    testCompile "org.grails:grails-datastore-rest-client:4.0.4.RELEASE"
    console "org.grails:grails-console"


    /**
     * Scheduling
     */
    compile 'org.grails.plugins:quartz:2.0.13'
}

task finalize {
    doLast {

    }
}

build.finalizedBy(finalize)

bootRun {
    systemProperties = System.properties
}

test {
    systemProperties = System.properties
}

generateIostateCommand {
    systemProperties = System.properties
}

generateControllerCommand {
    systemProperties = System.properties
}


